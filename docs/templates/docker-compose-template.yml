version: '3.8'

services:
  app:
    build: .
    container_name: example-app
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - API_KEY=${API_KEY}
    volumes:
      - app_data:/app/data
      - ./config:/app/config:ro
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  database:
    image: postgres:13-alpine
    container_name: example-db
    environment:
      - POSTGRES_DB=appdb
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U appuser -d appdb"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  cache:
    image: redis:6-alpine
    container_name: example-cache
    command: redis-server --appendonly yes
    volumes:
      - cache_data:/data
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  app_data:
  db_data:
  cache_data:

networks:
  app_network:
    driver: bridge
